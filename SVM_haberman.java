import com.imsl.datamining.supportvectormachine.*;
import com.imsl.stat.*;

public class SVM_haberman {

    public static void main(String[] args) throws Exception {

        SVClassification.VariableType[] varType = {
            SVClassification.VariableType.QUANTITATIVE_CONTINUOUS,
            SVClassification.VariableType.QUANTITATIVE_CONTINUOUS,
            SVClassification.VariableType.QUANTITATIVE_CONTINUOUS,
            SVClassification.VariableType.CATEGORICAL
        };

        final int N = 306;				// total number of points
        final int N_TEST = 30;			// number of points to use for testing
        final int N_TRAIN = N-N_TEST;	// number of points to use for training
        final int N_CAT = 4;  			// number of columns in the data
        final int CAT_COL = 3;			// category is in the 4th column
        
        double[][] x_full = getData();

        // Split the data into training and test subsets
        RandomSamples rs = new RandomSamples(new Random(134567));
        int[] idx = rs.getSampleIndices(N_TEST, N-1);
        
        double[][] x_train = new double[N_TRAIN][N_CAT];
        double[][] x_test = new double[N_TEST][N_CAT];
        int ii = 0;	int j = 0;
        for (int i=0; i<N; i++) {
        	if (ii < N_TEST && i == idx[ii]) {
        		x_test[ii] = x_full[idx[ii]];
        		ii++;
        	} else {
        		x_train[j++] = x_full[i];
        	}
        }

        // Extract knownClass values from the training set and then the test set
        double[] knownClass = new double[N_TRAIN];
        for (int i=0; i<N_TRAIN; i++) {
            knownClass[i] = x_train[i][CAT_COL];
        }
        double[] knownClassT = new double[N_TEST];
        for (int i=0; i<N_TEST; i++) {
            knownClassT[i] = x_test[i][CAT_COL];
        }        

        // Construct a Support Vector Machine and train it using training data
        SVClassification svm = new SVClassification(x_train, CAT_COL, varType);
        svm.fitModel();

        // Get the fitted values (classify the training data).
        double[] fittedClass = svm.predict();
        int[][] fittedClassErrors = svm.getClassErrors(knownClass, fittedClass);
        new com.imsl.math.PrintMatrix("fittedClassErrors").print(fittedClassErrors);        
        
        double[] predictedClass = svm.predict(x_test);
        int[][] predictedClassErrors = svm.getClassErrors(knownClassT, predictedClass);
        new com.imsl.math.PrintMatrix("classErrors").print(predictedClassErrors);                
    }

    private static double[][] getData() {
    	double[][] x = {
    			{30,64,1,0},
    			{30,62,3,0},
    			{30,65,0,0},
    			{31,59,2,0},
    			{31,65,4,0},
    			{33,58,10,0},
    			{33,60,0,0},
    			{34,59,0,1},
    			{34,66,9,1},
    			{34,58,30,0},
    			{34,60,1,0},
    			{34,61,10,0},
    			{34,67,7,0},
    			{34,60,0,0},
    			{35,64,13,0},
    			{35,63,0,0},
    			{36,60,1,0},
    			{36,69,0,0},
    			{37,60,0,0},
    			{37,63,0,0},
    			{37,58,0,0},
    			{37,59,6,0},
    			{37,60,15,0},
    			{37,63,0,0},
    			{38,69,21,1},
    			{38,59,2,0},
    			{38,60,0,0},
    			{38,60,0,0},
    			{38,62,3,0},
    			{38,64,1,0},
    			{38,66,0,0},
    			{38,66,11,0},
    			{38,60,1,0},
    			{38,67,5,0},
    			{39,66,0,1},
    			{39,63,0,0},
    			{39,67,0,0},
    			{39,58,0,0},
    			{39,59,2,0},
    			{39,63,4,0},
    			{40,58,2,0},
    			{40,58,0,0},
    			{40,65,0,0},
    			{41,60,23,1},
    			{41,64,0,1},
    			{41,67,0,1},
    			{41,58,0,0},
    			{41,59,8,0},
    			{41,59,0,0},
    			{41,64,0,0},
    			{41,69,8,0},
    			{41,65,0,0},
    			{41,65,0,0},
    			{42,69,1,1},
    			{42,59,0,1},
    			{42,58,0,0},
    			{42,60,1,0},
    			{42,59,2,0},
    			{42,61,4,0},
    			{42,62,20,0},
    			{42,65,0,0},
    			{42,63,1,0},
    			{43,58,52,1},
    			{43,59,2,1},
    			{43,64,0,1},
    			{43,64,0,1},
    			{43,63,14,0},
    			{43,64,2,0},
    			{43,64,3,0},
    			{43,60,0,0},
    			{43,63,2,0},
    			{43,65,0,0},
    			{43,66,4,0},
    			{44,64,6,1},
    			{44,58,9,1},
    			{44,63,19,1},
    			{44,61,0,0},
    			{44,63,1,0},
    			{44,61,0,0},
    			{44,67,16,0},
    			{45,65,6,1},
    			{45,66,0,1},
    			{45,67,1,1},
    			{45,60,0,0},
    			{45,67,0,0},
    			{45,59,14,0},
    			{45,64,0,0},
    			{45,68,0,0},
    			{45,67,1,0},
    			{46,58,2,1},
    			{46,69,3,1},
    			{46,62,5,1},
    			{46,65,20,1},
    			{46,62,0,0},
    			{46,58,3,0},
    			{46,63,0,0},
    			{47,63,23,1},
    			{47,62,0,1},
    			{47,65,0,1},
    			{47,61,0,0},
    			{47,63,6,0},
    			{47,66,0,0},
    			{47,67,0,0},
    			{47,58,3,0},
    			{47,60,4,0},
    			{47,68,4,0},
    			{47,66,12,0},
    			{48,58,11,1},
    			{48,58,11,1},
    			{48,67,7,1},
    			{48,61,8,0},
    			{48,62,2,0},
    			{48,64,0,0},
    			{48,66,0,0},
    			{49,63,0,1},
    			{49,64,10,1},
    			{49,61,1,0},
    			{49,62,0,0},
    			{49,66,0,0},
    			{49,60,1,0},
    			{49,62,1,0},
    			{49,63,3,0},
    			{49,61,0,0},
    			{49,67,1,0},
    			{50,63,13,1},
    			{50,64,0,1},
    			{50,59,0,0},
    			{50,61,6,0},
    			{50,61,0,0},
    			{50,63,1,0},
    			{50,58,1,0},
    			{50,59,2,0},
    			{50,61,0,0},
    			{50,64,0,0},
    			{50,65,4,0},
    			{50,66,1,0},
    			{51,59,13,1},
    			{51,59,3,1},
    			{51,64,7,0},
    			{51,59,1,0},
    			{51,65,0,0},
    			{51,66,1,0},
    			{52,69,3,1},
    			{52,59,2,1},
    			{52,62,3,1},
    			{52,66,4,1},
    			{52,61,0,0},
    			{52,63,4,0},
    			{52,69,0,0},
    			{52,60,4,0},
    			{52,60,5,0},
    			{52,62,0,0},
    			{52,62,1,0},
    			{52,64,0,0},
    			{52,65,0,0},
    			{52,68,0,0},
    			{53,58,4,1},
    			{53,65,1,1},
    			{53,59,3,1},
    			{53,60,9,1},
    			{53,63,24,1},
    			{53,65,12,1},
    			{53,58,1,0},
    			{53,60,1,0},
    			{53,60,2,0},
    			{53,61,1,0},
    			{53,63,0,0},
    			{54,60,11,1},
    			{54,65,23,1},
    			{54,65,5,1},
    			{54,68,7,1},
    			{54,59,7,0},
    			{54,60,3,0},
    			{54,66,0,0},
    			{54,67,46,0},
    			{54,62,0,0},
    			{54,69,7,0},
    			{54,63,19,0},
    			{54,58,1,0},
    			{54,62,0,0},
    			{55,63,6,1},
    			{55,68,15,1},
    			{55,58,1,0},
    			{55,58,0,0},
    			{55,58,1,0},
    			{55,66,18,0},
    			{55,66,0,0},
    			{55,69,3,0},
    			{55,69,22,0},
    			{55,67,1,0},
    			{56,65,9,1},
    			{56,66,3,1},
    			{56,60,0,0},
    			{56,66,2,0},
    			{56,66,1,0},
    			{56,67,0,0},
    			{56,60,0,0},
    			{57,61,5,1},
    			{57,62,14,1},
    			{57,64,1,1},
    			{57,64,9,0},
    			{57,69,0,0},
    			{57,61,0,0},
    			{57,62,0,0},
    			{57,63,0,0},
    			{57,64,0,0},
    			{57,64,0,0},
    			{57,67,0,0},
    			{58,59,0,0},
    			{58,60,3,0},
    			{58,61,1,0},
    			{58,67,0,0},
    			{58,58,0,0},
    			{58,58,3,0},
    			{58,61,2,0},
    			{59,62,35,1},
    			{59,60,0,0},
    			{59,63,0,0},
    			{59,64,1,0},
    			{59,64,4,0},
    			{59,64,0,0},
    			{59,64,7,0},
    			{59,67,3,0},
    			{60,59,17,1},
    			{60,65,0,1},
    			{60,61,1,0},
    			{60,67,2,0},
    			{60,61,25,0},
    			{60,64,0,0},
    			{61,62,5,1},
    			{61,65,0,1},
    			{61,68,1,1},
    			{61,59,0,0},
    			{61,59,0,0},
    			{61,64,0,0},
    			{61,65,8,0},
    			{61,68,0,0},
    			{61,59,0,0},
    			{62,59,13,1},
    			{62,58,0,1},
    			{62,65,19,1},
    			{62,62,6,0},
    			{62,66,0,0},
    			{62,66,0,0},
    			{62,58,0,0},
    			{63,60,1,1},
    			{63,61,0,0},
    			{63,62,0,0},
    			{63,63,0,0},
    			{63,63,0,0},
    			{63,66,0,0},
    			{63,61,9,0},
    			{63,61,28,0},
    			{64,58,0,0},
    			{64,65,22,0},
    			{64,66,0,0},
    			{64,61,0,0},
    			{64,68,0,0},
    			{65,58,0,1},
    			{65,61,2,1},
    			{65,62,22,1},
    			{65,66,15,1},
    			{65,58,0,0},
    			{65,64,0,0},
    			{65,67,0,0},
    			{65,59,2,0},
    			{65,64,0,0},
    			{65,67,1,0},
    			{66,58,0,1},
    			{66,61,13,1},
    			{66,58,0,0},
    			{66,58,1,0},
    			{66,68,0,0},
    			{67,64,8,1},
    			{67,63,1,1},
    			{67,66,0,0},
    			{67,66,0,0},
    			{67,61,0,0},
    			{67,65,0,0},
    			{68,67,0,0},
    			{68,68,0,0},
    			{69,67,8,1},
    			{69,60,0,0},
    			{69,65,0,0},
    			{69,66,0,0},
    			{70,58,0,1},
    			{70,58,4,1},
    			{70,66,14,0},
    			{70,67,0,0},
    			{70,68,0,0},
    			{70,59,8,0},
    			{70,63,0,0},
    			{71,68,2,0},
    			{72,63,0,1},
    			{72,58,0,0},
    			{72,64,0,0},
    			{72,67,3,0},
    			{73,62,0,0},
    			{73,68,0,0},
    			{74,65,3,1},
    			{74,63,0,0},
    			{75,62,1,0},
    			{76,67,0,0},
    			{77,65,3,0},
    			{78,65,1,1},
    			{83,58,2,1}    			
    	};
    	return x;
   	} 
}
